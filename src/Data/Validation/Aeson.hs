{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE TypeFamilies #-}

module Data.Validation.Aeson where

import Control.Applicative
import Control.Monad
import Control.Monad.Except (catchError, throwError)
import Data.Proxy
import qualified Data.Map as M
import qualified Data.List as L
import qualified Data.Text as T
import Data.Aeson as J
import qualified Data.Aeson.BetterErrors as JB
import Data.Aeson.Types
import Data.Validation.Validation

-- ----------------------------------------------------------------
-- For JSON 
-- ----------------------------------------------------------------

-- | Declares a method to get JSON parser by the type of a field.
--
-- Besides following instances, instance definition of every @Validatable@ type is generated by @validatable@.
class AsType a where
    -- | Returns JSON parser by a type.
    asType :: Proxy a -- ^ Type specifier.
           -> JB.Parse ValidationError' a -- ^ JSON parser.

instance AsType [Char] where
    asType _ = JB.asString
instance {-# OVERLAPPABLE #-} (Integral a) => AsType a where
    asType _ = JB.asIntegral
instance AsType Bool where
    asType _ = JB.asBool
instance {-# OVERLAPPABLE #-} (AsType a) => AsType [a] where
    asType _ = JB.eachInArray $ asType (Proxy :: Proxy a)
instance AsType Object where
    asType _ = JB.asObject

-- | Declares a method to get JSON parser by the type and the pointer to value in current parsing state.
--
-- This method is used to generate the instance of @FromJSONBetterErrors@
-- In the generated code, @Pointer@ given as second argument is always @KeyPointer@.
-- Although, it can be @RawPointer@ when invoked from other instance implementation.
class AsField a where
    -- | Returns JSON parser for a field.
    asField :: Proxy a -- ^ Type specifier for the field.
            -> Pointer -- ^ Pointer indicating target value to parse in current state.
            -> JB.Parse ValidationError' a -- ^ JSON parser.

instance {-# OVERLAPPABLE #-} (AsType a) => AsField a where
    asField p (KeyPointer n) = JB.key (T.pack n) (asType p)
    asField p RawPointer = asType p
-- Without this instance, 'AsField [a]' has higher priority than '(AsType a) => AsField a'.
instance {-# OVERLAPPING #-} AsField [Char] where
    asField p (KeyPointer n) = JB.key (T.pack n) (asType p)
    asField p RawPointer = asType p
instance (AsField a) => AsField (Maybe a) where
    asField _ (KeyPointer n) = JB.keyOrDefault (T.pack n)
                                               Nothing
                                               (JB.perhaps $ asField (Proxy :: Proxy a) RawPointer)

instance {-# OVERLAPS #-} (AsField a, AllVerifiable vs a) => AsField (a :? vs) where
    asField _ n = do
        source <- JB.asValue >>= return . toSource
        asField (Proxy :: Proxy a) n >>= \v -> do
                case verifyAll (Proxy :: Proxy vs) v of
                    Left e -> JB.throwCustomError e
                    Right v' -> return $ SafeData v' (Proxy :: Proxy vs)

instance {-# OVERLAPS #-} (AsField a) => AsField [a] where
    -- FIXME index information is lost.
    asField _ (KeyPointer n) = JB.key (T.pack n) $ JB.eachInArray
                                                 $ asField (Proxy :: Proxy a) RawPointer
instance {-# OVERLAPPABLE #-} (AsField a) => AsField (F a) where
    asField _ n = do
        source <- JB.asValue >>= return . toSource
        (asField (Proxy :: Proxy a) n >>= \v' -> return (F (Just v') source Nothing))
            `catchError` \e -> return $ case e of
                JB.InvalidJSON s -> F Nothing (StringValidatable s) (Just $ ErrorString "invalid JSON format")
                JB.BadSchema _ es -> case es of
                    JB.CustomError ve -> F Nothing source (Just $ ve)
                    JB.KeyMissing _ -> F Nothing source (Just $ ValueMissing)
                    JB.WrongType _ v -> F Nothing source (Just $ TypeMismatch (Proxy :: Proxy a))
                    JB.FromAeson s -> F Nothing source (Just $ ErrorString s)
                    JB.OutOfBounds _ -> F Nothing source (Just $ TypeMismatch (Proxy :: Proxy a))
                    JB.ExpectedIntegral _ -> F Nothing source (Just $ TypeMismatch (Proxy :: Proxy a))
